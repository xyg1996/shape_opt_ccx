#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.4.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'/share/simforge_home/nsccwx/xyg/Salome')

###
### PARAVIS component
###

import pvsimple
pvsimple.ShowParaviewView()
# trace generated using paraview version 5.6.0
#
# To ensure correct image size when batch processing, please search 
# for and uncomment the line `# renderView*.ViewSize = [*,*]`

#### import the simple module from the paraview
from pvsimple import *
#### disable automatic camera reset on 'Show'
pvsimple._DisableFirstRenderCameraReset()

# create a new 'XML Unstructured Grid Reader'
simple_test12vtu = XMLUnstructuredGridReader(FileName=['/share/simforge_home/nsccwx/xyg/calculix/test/simple_test-1.2.vtu'])

# set active source
SetActiveSource(simple_test12vtu)

# get active view
renderView1 = GetActiveViewOrCreate('RenderView')
# uncomment following to set a specific view size
# renderView1.ViewSize = [1606, 651]

# show data in view
simple_test12vtuDisplay = Show(simple_test12vtu, renderView1)

# trace defaults for the display properties.
simple_test12vtuDisplay.Representation = 'Surface'

# reset view to fit data
renderView1.ResetCamera()

# show data in view
simple_test12vtuDisplay = Show(simple_test12vtu, renderView1)

# reset view to fit data
renderView1.ResetCamera()

# get the material library
materialLibrary1 = GetMaterialLibrary()

# update the view to ensure updated data information
renderView1.Update()

# set scalar coloring
ColorBy(simple_test12vtuDisplay, ('POINTS', 'U', 'Magnitude'))

# rescale color and/or opacity maps used to include current data range
simple_test12vtuDisplay.RescaleTransferFunctionToDataRange(True, False)

# show color bar/color legend
simple_test12vtuDisplay.SetScalarBarVisibility(renderView1, True)

# get color transfer function/color map for 'U'
uLUT = GetColorTransferFunction('U')

# get opacity transfer function/opacity map for 'U'
uPWF = GetOpacityTransferFunction('U')

# set scalar coloring
ColorBy(simple_test12vtuDisplay, ('POINTS', 'U', 'D1'))

# rescale color and/or opacity maps used to exactly fit the current data range
simple_test12vtuDisplay.RescaleTransferFunctionToDataRange(False, False)

# Update a scalar bar component title.
UpdateScalarBarsComponentTitle(uLUT, simple_test12vtuDisplay)

# set scalar coloring
ColorBy(simple_test12vtuDisplay, ('POINTS', 'U', 'D3'))

# rescale color and/or opacity maps used to exactly fit the current data range
simple_test12vtuDisplay.RescaleTransferFunctionToDataRange(False, False)

# Update a scalar bar component title.
UpdateScalarBarsComponentTitle(uLUT, simple_test12vtuDisplay)

# set scalar coloring
ColorBy(simple_test12vtuDisplay, ('POINTS', 'U', 'Magnitude'))

# rescale color and/or opacity maps used to exactly fit the current data range
simple_test12vtuDisplay.RescaleTransferFunctionToDataRange(False, False)

# Update a scalar bar component title.
UpdateScalarBarsComponentTitle(uLUT, simple_test12vtuDisplay)

# create a new 'Warp By Vector'
warpByVector1 = WarpByVector(Input=simple_test12vtu)

# set active source
SetActiveSource(warpByVector1)

# show data in view
warpByVector1Display = Show(warpByVector1, renderView1)

# trace defaults for the display properties.
warpByVector1Display.Representation = 'Surface'

# show color bar/color legend
warpByVector1Display.SetScalarBarVisibility(renderView1, True)

# set active source
SetActiveSource(warpByVector1)

# show data in view
warpByVector1Display = Show(warpByVector1, renderView1)

# hide data in view
Hide(simple_test12vtu, renderView1)

# show color bar/color legend
warpByVector1Display.SetScalarBarVisibility(renderView1, True)

# update the view to ensure updated data information
renderView1.Update()

# Properties modified on warpByVector1
warpByVector1.ScaleFactor = 178.39087472301182

# update the view to ensure updated data information
renderView1.Update()

# Properties modified on warpByVector1
warpByVector1.Vectors = ['POINTS', 'U']

# update the view to ensure updated data information
renderView1.Update()

# Properties modified on warpByVector1
warpByVector1.ScaleFactor = 4.278039239733909

# update the view to ensure updated data information
renderView1.Update()

# Properties modified on warpByVector1
warpByVector1.ScaleFactor = 9.059377213554159

# update the view to ensure updated data information
renderView1.Update()

#### saving camera placements for all active views

# current camera placement for renderView1
renderView1.CameraPosition = [0.9430399368944575, -129.47354390872422, 108.5581883860381]
renderView1.CameraFocalPoint = [20.00000000000003, -1.914195180398785e-14, 12.499999999999977]
renderView1.CameraViewUp = [-0.114493462646896, 0.602731710339538, 0.7896871104192464]
renderView1.CameraParallelScale = 23.717082451262844


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
