import os

class Path:

    def __init__(self):

        # Windows
        if os.name == 'nt':
            self.op_sys = 'windows' # OS name
            self.extension = '.exe' # file extension in OS


        # Linux
        else:
            self.op_sys = 'linux' # OS name
            self.extension = '' # file extension in OS
            self.user_homedir = os.environ['HOME']
            print('user_homedir:',self.user_homedir)

        # Application home directory - the one with README.md and LICENSE
        # self.app_home_dir = os.path.normpath(
        #     os.path.join(os.path.dirname(
        #         os.path.realpath(__file__)), '..'))
        self.app_home_dir = os.path.normpath(os.path.dirname(os.path.realpath(__file__)))

        self.config = os.path.join(self.app_home_dir, 'config')
        self.main_xml = os.path.join(self.config, 'Window.xml')
        self.kom_xml = os.path.join(self.config, 'kom.xml')
        self.settings_xml = os.path.join(self.config, 'SettingsDialog.xml')
        self.dialog_xml = os.path.join(self.config, 'KeywordDialog.xml')
        self.version_txt = os.path.join(self.config, 'version.txt')

        self.bin = os.path.join(self.app_home_dir, 'bin')
        self.ccx = os.path.join(self.app_home_dir, 'ccx_' + self.op_sys, 'src')
        self.settings = os.path.join(self.config, 'Settings_' + self.op_sys + '.py')
        self.doc = os.path.join(self.app_home_dir, 'doc')
        self.examples = os.path.join(self.app_home_dir, 'examples')
        self.default_inp = os.path.join(self.examples,'simple_test.inp')
        self.default_med = os.path.join(self.examples,'simple_test.med')
        self.img = os.path.join(self.app_home_dir, 'img')
        self.src = os.path.join(self.app_home_dir, 'src')
        self.path_ccx = os.path.join(self.bin, 'ccx' + self.extension)
        self.path_cgx = os.path.join(self.bin, 'cgx' + self.extension)

        self.user_homedir = os.environ['HOME']
        self.user_settings = os.path.join(self.user_homedir,'Settings_' + self.op_sys + '.py')

        self.fem_run = os.path.join(self.config, 'fem_run.sh')

    def append_to_PATH(self, paths):
        """Pyinstaller bug in Windows:
        append 'app_home_dir' and 'src' directories to PATH.
        """
        if not os.environ['PATH'].endswith(os.pathsep):
            os.environ['PATH'] += os.pathsep
        for path in paths:
            if path not in os.environ['PATH']:
                os.environ['PATH'] += path
                os.environ['PATH'] += os.pathsep

    def abspath(self, rel):
        """Convert relative path to absolute and check."""

        # We do not know if rel is really relative path
        if os.path.isfile(os.path.join(self.app_home_dir, rel)):
            return os.path.join(self.app_home_dir, rel)

        # If rel is absolute path - return as is
        else:
            return rel


p = Path()