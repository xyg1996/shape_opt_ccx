import queue
from .crontrol_ui import Ui_Form
from PyQt5 import Qt as Q
from ...common import load_icon
from .path import p

class Maincontrol(Q.QWidget):
    def __init__(self,qianchuli):
        super(Maincontrol,self).__init__()
        self.ui = Ui_Form()
        self.ui.setupUi(self)
        # 给按钮添加图标
        self.add_icon()

        # QProcess object for external app
        self.process_fem = Q.QProcess(self)
        self.process_fem.readyRead.connect(self.dataReady)
        # self.process.started.connect(lambda: self.bt1.setEnabled(False))
        # self.process.finished.connect(lambda: self.bt1.setEnabled(True))
        self.process_fem.setProcessChannelMode(Q.QProcess.MergedChannels)

        self.process_opt = Q.QProcess(self)
        self.process_opt.readyRead.connect(self.dataReady_opt)
        self.process_opt.setProcessChannelMode(Q.QProcess.MergedChannels)

        self.ui.pushButton_2.clicked.connect(self.start_fem)
        self.ui.pushButton.clicked.connect(self.kill_fem)

        self.ui.pushButton_3.clicked.connect(self.start_opt)
        self.ui.pushButton_4.clicked.connect(self.kill_opt)

        self.ui.comboBox_2.addItems(['q_x86_sf'])
        self.ui.comboBox.addItems(['1','2','4','8','16','32'])

    def add_icon(self):
        self.ui.pushButton_2.setIcon(load_icon('startdefault.png'))
        self.ui.pushButton_3.setIcon(load_icon('startdefault.png'))
        self.ui.pushButton.setIcon(load_icon('halt.png'))
        self.ui.pushButton_4.setIcon(load_icon('halt.png'))

    def dataReady(self):
        #self.keyboardWidget = KeyboardWidget()
        self.simulationOutput = self.ui.textBrowser.textCursor()
        processStdout = bytearray(self.process_fem.readAllStandardOutput())
        processStdout = processStdout.decode(encoding='UTF-8',errors='strict')
        newCursor1 = self.ui.textBrowser.textCursor()
        newCursor1.movePosition(Q.QTextCursor.End)
        self.ui.textBrowser.setTextCursor(newCursor1)
        self.simulationOutput = self.ui.textBrowser.textCursor()
        self.simulationOutput.insertText(processStdout)

    def dataReady_opt(self):
        #self.keyboardWidget = KeyboardWidget()
        self.OptOutput = self.ui.textBrowser_2.textCursor()
        processStdout = bytearray(self.process_opt.readAllStandardOutput())
        processStdout = processStdout.decode(encoding='UTF-8',errors='strict')
        newCursor1 = self.ui.textBrowser_2.textCursor()
        newCursor1.movePosition(Q.QTextCursor.End)
        self.ui.textBrowser_2.setTextCursor(newCursor1)
        self.OptOutput = self.ui.textBrowser_2.textCursor()
        self.OptOutput.insertText(processStdout)

    def start_fem(self):
        self.num_pro = self.ui.comboBox.currentText()
        self.queue = self.ui.comboBox_2.currentText()
        self.read_config()
        cmd = 'sh ' + p.fem_run
        cmd = cmd + " " + str(self.num_pro) + " " + self.current_working_dir
        cmd = cmd + " " + str(self.queue) + " " + self.model
        print("fem_run command:",cmd)
        self.process_fem.start(cmd)
    
    def kill_fem(self):
        self.process_fem.kill()
        self.simulationOutput.insertText("——————计算被手动终止！——————" + "\n")

    def start_opt(self):
        self.num_pro = self.ui.comboBox.currentText()
        self.queue = self.ui.comboBox_2.currentText()
        cmd = 'python3 ' + p.opt_run
        cmd = cmd + " " + str(self.num_pro) + " " + self.current_working_dir
        cmd = cmd + " " + str(self.queue) + " " + self.model
        print("opt_run command:",cmd)
        self.process_opt.start(cmd)

    def kill_opt(self):
        self.process_opt.kill()
        self.OptOutput.insertText("——————计算被手动终止！——————" + "\n")
        
    def read_config(self):
        with open(p.user_settings, 'r') as f:
            for line in f.readlines():
                if(line.find('self.start_model') == 0):
                    self.model = line.split()[2]
                    self.model = self.model[1:-5] # *.inp
                    print('current_moel',self.model)
                if(line.find('self.working_dir') == 0):
                    self.current_working_dir = line.split()[2]
                    self.current_working_dir = self.current_working_dir[1:-1]
                    print('current_working_dir:',self.current_working_dir)
